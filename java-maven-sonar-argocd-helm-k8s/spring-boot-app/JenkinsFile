pipeline {
  agent {
    docker {
      image 'px7598/maven-praveen-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access host's Docker daemon
    }
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        //git branch: 'main', url: 'https://github.com/iam-veeramalla/Jenkins-Zero-To-Hero.git'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://54.89.176.7:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "px7598/ultimate-cicd:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
          // Debug: print BUILD_NUMBER and DOCKER_IMAGE
          echo "BUILD_NUMBER: ${BUILD_NUMBER}"
          echo "DOCKER_IMAGE: ${DOCKER_IMAGE}"
          
          // Clean up BUILD_NUMBER by removing any unwanted characters
          sanitized_build_number = "${BUILD_NUMBER}".replaceAll("[^a-zA-Z0-9_-]", "")
          echo "Sanitized BUILD_NUMBER: ${sanitized_build_number}"
          
          // Now use the sanitized build number to create the image tag
          DOCKER_IMAGE = "px7598/ultimate-cicd:${sanitized_build_number}"
          echo "DOCKER_IMAGE (after sanitization): ${DOCKER_IMAGE}"
          
          // Perform the Docker build and push
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          
          // Debug: List docker images on the agent to ensure the image exists
          sh 'docker images'
          
          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            dockerImage.push()
          }
        }
      }
    }
    stage('Update Deployment File') {
      environment {
        GIT_REPO_NAME = "ci-cd-pipeline-jenkins-k8s-argoCD"
        GIT_USER_NAME = "DhayanidhiKB"
      }
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
            git config user.email "dayanidhipraveen44@gmail.com"
            git config user.name "Dhayanidhi KB"
            BUILD_NUMBER=${BUILD_NUMBER}
            sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
            git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
            git commit -m "Update deployment image to version ${BUILD_NUMBER}"
            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD
          '''
        }
      }
    }
  }
}
